@page "/counter"
@using Microsoft.AspNetCore.Components.WebView
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="IncrementCount">Click me</button>
<button class="bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded ml-2" @onclick="() => OpenDialog()">Open Dialog</button>

@if (showModal)
{
    <!-- Backdrop -->
    <div class="fixed inset-0 bg-black bg-opacity-50 z-40" @onclick="() => showModal = false"></div>

    <!-- Modal -->
    <div class="fixed inset-0 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-md mx-4" @onclick:stopPropagation="true">
            <!-- Header -->
            <div class="flex items-center justify-between p-4 border-b">
                <h3 class="text-lg font-semibold text-gray-900">Counter Dialog</h3>
                <button class="text-gray-400 hover:text-gray-600" @onclick="() => showModal = false">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <!-- Body -->
            <div class="p-4">
                <p class="text-gray-700">The current count is: <span class="font-bold">@currentCount</span></p>

                <!-- Render Mode Info -->
                <div class="mt-4 p-3 bg-gray-100 rounded">
                    <p class="font-semibold">Render Mode:</p>
                    <p>@renderModeInfo</p>
                    <p class="text-xs text-gray-500 mt-2">NavigationManager Type: @NavManager.GetType().FullName</p>
                </div>
            </div>

            <!-- Footer -->
            <div class="flex justify-end p-4 border-t">
                <button class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 rounded mr-2" @onclick="() => showModal = false">
                    Close
                </button>
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded" @onclick="ResetCounter">
                    Reset Counter
                </button>
            </div>
        </div>
    </div>
}

@code {
    private int currentCount = 0;
    private bool showModal = false;
    private string renderModeInfo = "Checking...";

    private void IncrementCount()
    {
        currentCount++;
    }

    private async Task OpenDialog()
    {
        showModal = true;
        await DetectRenderMode();
    }

    private async Task DetectRenderMode()
    {
        try
        {
            // Check NavigationManager implementation type
            string navManagerType = NavManager.GetType().Name;

            // Try to detect via JS Interop
            bool isServerSide = await JSRuntime.InvokeAsync<bool>("eval",
                "typeof Blazor !== 'undefined' && Blazor._internal && Blazor._internal.navigationManager.constructor.name === 'ServerNavigationManager'");

            if (navManagerType.Contains("WebView"))
            {
                renderModeInfo = "WebView Mode (Client-side BlazorWebView)";
            }
            else if (isServerSide || navManagerType.Contains("Server"))
            {
                renderModeInfo = "Server Render Mode";
            }
            else
            {
                renderModeInfo = "Client Render Mode (WebAssembly)";
            }
        }
        catch (Exception ex)
        {
            renderModeInfo = $"Error detecting: {ex.Message}";
        }
    }

    private void ResetCounter()
    {
        currentCount = 0;
        showModal = false;
    }
}